# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  """JWT access token"""
  accessToken: String!

  """JWT refresh token"""
  refreshToken: String!
  user: User!
}

type Author {
  firstName: String
  id: Int!
  lastName: String
  posts: [Post!]
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

"""Date custom scalar type"""
scalar Date

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  addComment(comment: String!, postId: Int!): Post!
  changePassword(data: ChangePasswordInput!): User!
  login(data: LoginInput!): Auth!
  refreshToken(token: String!): Token!
  signup(data: SignupInput!): Auth!
  updatePost(upDatePostData: UpdatePostInput!): Author!
  updateUser(data: UpdateUserInput!): User!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  asc
  desc
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Post {
  author: User!
  content: String!

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  id: ID!
  published: Boolean!
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  votes: Int
}

type PostConnection {
  edges: [PostEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PostEdge {
  cursor: String!
  node: Post!
}

input PostOrder {
  direction: OrderDirection!
  field: PostOrderField!
}

"""Properties by which post connections can be ordered."""
enum PostOrderField {
  content
  createdAt
  id
  published
  title
  updatedAt
}

type Query {
  author(firstName: String, id: Int = 114514, lastName: String = "defaultLastName"): Author!
  getMe: Author!
  hello(name: String!): String!
  hello2(id: String!): String!
  hello3(id: String!): String!
  helloWorld: String!
  me: User!
  post(postId: String!): Post!
  publishedPosts(after: String, before: String, first: Int, last: Int, orderBy: PostOrder, query: String, skip: Int): PostConnection!
  userPosts(userId: String!): [Post!]!
}

"""User role"""
enum Role {
  ADMIN
  USER
}

input SignupInput {
  email: String!
  firstname: String
  lastname: String
  password: String!
}

type Subscription {
  userLogin: Author!
}

type Token {
  """JWT access token"""
  accessToken: String!

  """JWT refresh token"""
  refreshToken: String!
}

input UpdatePostInput {
  postId: Int!
}

input UpdateUserInput {
  firstname: String
  lastname: String
}

type User {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  email: String!
  firstname: String
  id: ID!
  lastname: String
  posts: [Post!]!
  role: Role!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}
